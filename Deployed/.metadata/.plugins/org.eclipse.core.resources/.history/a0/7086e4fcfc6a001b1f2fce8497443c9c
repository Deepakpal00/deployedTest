package com.deployed.serviceImplementation;

import java.util.Arrays;
import java.util.PriorityQueue;

import com.deployed.service.CalculateCostService;

public class CalculateCostServiceImpl implements CalculateCostService{

	@Override
	public int calculateMinCost(int[] input) {
		
		// calculating array length 
		int inputLength = input.length;
		
		// Create a priority queue 
		PriorityQueue<Integer> priorityQueue = new PriorityQueue<Integer>(); 

		// Adding items to the pQueue 
//		for (int i = 0; i < inputLength; i++) { 
//			pq.add(input[i]); 
//		} 

		Arrays.stream(input).forEach(e->priorityQueue.add(e));
		
		
		
		// Initialize result 
		int res = 0; 

		// While size of priority queue 
		// is more than 1 
		while (pq.size() > 1) { 
			// Extract shortest two ropes from pq 
			int first = pq.poll(); 
			int second = pq.poll(); 

			// Connect the ropes: update result 
			// and insert the new rope to pq 
			res += first + second; 
			pq.add(first + second); 
		
		
		
		return 0;
	}

	

}
